{"ast":null,"code":"import React from 'react';\nvar isStyleObject = function (obj) {\n  return typeof obj === 'object' && obj !== null;\n};\nvar OTPInput = function (_a) {\n  var _b = _a.value,\n    value = _b === void 0 ? '' : _b,\n    _c = _a.numInputs,\n    numInputs = _c === void 0 ? 4 : _c,\n    onChange = _a.onChange,\n    renderInput = _a.renderInput,\n    _d = _a.shouldAutoFocus,\n    shouldAutoFocus = _d === void 0 ? false : _d,\n    _e = _a.inputType,\n    inputType = _e === void 0 ? 'text' : _e,\n    renderSeparator = _a.renderSeparator,\n    placeholder = _a.placeholder,\n    containerStyle = _a.containerStyle,\n    inputStyle = _a.inputStyle;\n  var _f = React.useState(0),\n    activeInput = _f[0],\n    setActiveInput = _f[1];\n  var inputRefs = React.useRef([]);\n  var getOTPValue = function () {\n    return value ? value.toString().split('') : [];\n  };\n  var isInputNum = inputType === 'number' || inputType === 'tel';\n  React.useEffect(function () {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n  React.useEffect(function () {\n    var _a;\n    if (shouldAutoFocus) {\n      (_a = inputRefs.current[0]) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [shouldAutoFocus]);\n  var getPlaceholderValue = function () {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n  var isInputValueValid = function (value) {\n    var isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n  var handleChange = function (event) {\n    var value = event.target.value;\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    } else {\n      var nativeEvent = event.nativeEvent;\n      // @ts-expect-error - This was added previosly to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n    }\n  };\n  var handleFocus = function (event) {\n    return function (index) {\n      setActiveInput(index);\n      event.target.select();\n    };\n  };\n  var handleBlur = function () {\n    setActiveInput(activeInput - 1);\n  };\n  var handleKeyDown = function (event) {\n    var otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (event.code === 'Spacebar' || event.code === 'Space' || event.code === 'ArrowUp' || event.code === 'ArrowDown') {\n      event.preventDefault();\n    } else if (isInputNum && !isInputValueValid(event.key)) {\n      event.preventDefault();\n    }\n  };\n  var focusInput = function (index) {\n    var _a, _b;\n    var activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n    if (inputRefs.current[activeInput]) {\n      (_a = inputRefs.current[activeInput]) === null || _a === void 0 ? void 0 : _a.focus();\n      (_b = inputRefs.current[activeInput]) === null || _b === void 0 ? void 0 : _b.select();\n      setActiveInput(activeInput);\n    }\n  };\n  var changeCodeAtFocus = function (value) {\n    var otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n  var handleOTPChange = function (otp) {\n    var otpValue = otp.join('');\n    onChange(otpValue);\n  };\n  var handlePaste = function (event) {\n    var _a;\n    event.preventDefault();\n    var otp = getOTPValue();\n    var nextActiveInput = activeInput;\n    // Get pastedData in an array of max size (num of inputs - current position)\n    var pastedData = event.clipboardData.getData('text/plain').slice(0, numInputs - activeInput).split('');\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some(function (value) {\n      return isNaN(Number(value));\n    })) {\n      return;\n    }\n    // Paste data from focused input onwards\n    for (var pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = (_a = pastedData.shift()) !== null && _a !== void 0 ? _a : '';\n        nextActiveInput++;\n      }\n    }\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n  return React.createElement(\"div\", {\n    style: Object.assign({\n      display: 'flex',\n      alignItems: 'center'\n    }, isStyleObject(containerStyle) && containerStyle),\n    className: typeof containerStyle === 'string' ? containerStyle : undefined\n  }, Array.from({\n    length: numInputs\n  }, function (_, index) {\n    return index;\n  }).map(function (index) {\n    var _a, _b, _c;\n    return React.createElement(React.Fragment, {\n      key: index\n    }, renderInput({\n      value: (_a = getOTPValue()[index]) !== null && _a !== void 0 ? _a : '',\n      placeholder: (_c = (_b = getPlaceholderValue()) === null || _b === void 0 ? void 0 : _b[index]) !== null && _c !== void 0 ? _c : undefined,\n      ref: function (element) {\n        return inputRefs.current[index] = element;\n      },\n      onChange: handleChange,\n      onFocus: function (event) {\n        return handleFocus(event)(index);\n      },\n      onBlur: handleBlur,\n      onKeyDown: handleKeyDown,\n      onPaste: handlePaste,\n      autoComplete: 'off',\n      maxLength: 1,\n      'aria-label': \"Please enter OTP character \".concat(index + 1),\n      style: Object.assign({\n        width: '1em',\n        textAlign: 'center'\n      }, isStyleObject(inputStyle) && inputStyle),\n      className: typeof inputStyle === 'string' ? inputStyle : undefined,\n      type: inputType\n    }, index), index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator));\n  }));\n};\nexport { OTPInput as default };","map":null,"metadata":{},"sourceType":"module"}