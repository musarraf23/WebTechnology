{"ast":null,"code":"import { useEffect } from \"react\";\n\n// This hook detects clicks outside of the specified component and calls the provided handler function.\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    // Define the listener function to be called on click/touch events\n    const listener = event => {\n      // If the click/touch event originated inside the ref element, do nothing\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      // Otherwise, call the provided handler function\n      handler(event);\n    };\n\n    // Add event listeners for mousedown and touchstart events on the document\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    // Cleanup function to remove the event listeners when the component unmounts or when the ref/handler dependencies change\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]); // Only run this effect when the ref or handler function changes\n}","map":{"version":3,"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"sources":["C:/Users/VICTUS/OneDrive/Desktop/StudyNotion-An-Online-Education-Platform-master/src/hooks/useOnClickOutside.js"],"sourcesContent":["import { useEffect } from \"react\";\n\n// This hook detects clicks outside of the specified component and calls the provided handler function.\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    // Define the listener function to be called on click/touch events\n    const listener = (event) => {\n      // If the click/touch event originated inside the ref element, do nothing\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      // Otherwise, call the provided handler function\n      handler(event);\n    };\n\n    // Add event listeners for mousedown and touchstart events on the document\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    // Cleanup function to remove the event listeners when the component unmounts or when the ref/handler dependencies change\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]); // Only run this effect when the ref or handler function changes\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;;AAEjC;AACA,eAAe,SAASC,iBAAiBA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACtDH,SAAS,CAAC,MAAM;IACd;IACA,MAAMI,QAAQ,GAAIC,KAAK,IAAK;MAC1B;MACA,IAAI,CAACH,GAAG,CAACI,OAAO,IAAIJ,GAAG,CAACI,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;QACtD;MACF;MACA;MACAL,OAAO,CAACE,KAAK,CAAC;IAChB,CAAC;;IAED;IACAI,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,QAAQ,CAAC;IAChDK,QAAQ,CAACC,gBAAgB,CAAC,YAAY,EAAEN,QAAQ,CAAC;;IAEjD;IACA,OAAO,MAAM;MACXK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,QAAQ,CAAC;MACnDK,QAAQ,CAACE,mBAAmB,CAAC,YAAY,EAAEP,QAAQ,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACF,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module"}